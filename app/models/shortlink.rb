# frozen_string_literal: true

# == Schema Information
#
# Table name: shortlinks
#
#  id          :bigint           not null, primary key
#  source      :text(65535)      not null
#  slug        :string(255)      not null
#  click_count :integer          default(0)
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  status      :integer          default("active"), not null
#  user_id     :bigint
#

# Shortlink is the core model of the app.  Authorized users create Shortlinks
# through the JSON API with a :source parameter.  A :slug attribute is
# autogenerated and returned.  This can be used by the client as a publicly
# shared link, which will redirect back to the source.
class Shortlink < ApplicationRecord
  belongs_to :user

  has_many :clicks, dependent: :destroy

  validates_presence_of :source
  validates_with ShortlinkSourceValidator

  validates_uniqueness_of :source, scope: :user

  before_create :set_slug # new record

  enum status: %i[active expired] # default 0 (active)

  # for task set_expired
  scope :expire_ready, -> { active.where('created_at < ?', 90.days.ago) }

  def as_json(options)
    filtered = %w[id user_id click_count created_at updated_at]
    super(options.merge({ root: true, except: filtered }))
  end

  private

  def set_slug
    self.slug = generate_slug
  end

  def generate_slug
    loop do
      new_shortlink = ShortlinkFormatter::Slug.generate
      unless Shortlink.active.where(slug: new_shortlink).exists?
        break new_shortlink
      end
    end
  end
end
